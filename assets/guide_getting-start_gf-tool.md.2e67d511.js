import{_ as t,c as s,o as a,d as e}from"./app.ce21e48a.js";const n="/gf-docs/assets/gen-service-1.fe688cb7.png",l="/gf-docs/assets/gen-service-2.5ebfcdae.png",o="/gf-docs/assets/gen-service-3.f4621bed.png",d="/gf-docs/assets/gen-service-4.4874088a.png",p="/gf-docs/assets/gen-service-4.4874088a.png",r="/gf-docs/assets/gen-service-6.a3cd5819.png",c="/gf-docs/assets/gen-dao-1.9a4057a3.png",i="/gf-docs/assets/gen-dao-2.17e21976.png",h="/gf-docs/assets/gen-dao-3.9d8813ce.png",C="/gf-docs/assets/gen-dao-4.a8c1c443.png",g="/gf-docs/assets/gen-dao-5.9cc9dff9.png",_=JSON.parse('{"title":"开发工具","description":"","frontmatter":{},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[{"level":3,"title":"工具职责","slug":"工具职责","link":"#工具职责","children":[]}]},{"level":2,"title":"安装","slug":"安装","link":"#安装","children":[{"level":3,"title":"预编译安装","slug":"预编译安装","link":"#预编译安装","children":[]},{"level":3,"title":"手动编译","slug":"手动编译","link":"#手动编译","children":[]},{"level":3,"title":"验证安装成功","slug":"验证安装成功","link":"#验证安装成功","children":[]}]},{"level":2,"title":"Help 查看帮助","slug":"help-查看帮助","link":"#help-查看帮助","children":[]},{"level":2,"title":"Version 查看版本","slug":"version-查看版本","link":"#version-查看版本","children":[]},{"level":2,"title":"Init 创建项目","slug":"init-创建项目","link":"#init-创建项目","children":[]},{"level":2,"title":"Build 交叉编译","slug":"build-交叉编译","link":"#build-交叉编译","children":[]},{"level":2,"title":"Gen 代码生成","slug":"gen-代码生成","link":"#gen-代码生成","children":[{"level":3,"title":"服务","slug":"服务","link":"#服务","children":[]},{"level":3,"title":"dao","slug":"dao","link":"#dao","children":[]}]},{"level":2,"title":"Run 自动编译","slug":"run-自动编译","link":"#run-自动编译","children":[{"level":3,"title":"注意事项","slug":"注意事项-1","link":"#注意事项-1","children":[]}]},{"level":2,"title":"Pack 资源打包","slug":"pack-资源打包","link":"#pack-资源打包","children":[]},{"level":2,"title":"Docker 镜像编译","slug":"docker-镜像编译","link":"#docker-镜像编译","children":[]}],"relativePath":"guide/getting-start/gf-tool.md","lastUpdated":1675240931000}'),y={name:"guide/getting-start/gf-tool.md"},A=e(`<h1 id="开发工具" tabindex="-1">开发工具 <a class="header-anchor" href="#开发工具" aria-hidden="true">#</a></h1><p>GoFrame框架提供了功能强大的gf命令行开发辅助工具，是框架发展的一个重要组成部分</p><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-hidden="true">#</a></h2><p>GoFrame框架提供了功能强大的gf命令行开发辅助工具，是框架发展的一个重要组成部分，工具地址：<a href="https://github.com/gogf/gf/tree/master/cmd/gf" target="_blank" rel="noreferrer">https://github.com/gogf/gf/tree/master/cmd/gf</a> 工具安装请参考仓库页面</p><h3 id="工具职责" tabindex="-1">工具职责 <a class="header-anchor" href="#工具职责" aria-hidden="true">#</a></h3><ul><li>简化工程开发，提高开发效率</li><li>支持框架工程设计规范准确落地</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>部分命令需要您先安装好Golang基础的开发环境，环境安装具体请参考 环境安装 章节。</li><li>最新的CLI工具版本会随着最新的框架版本走</li></ul></div><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-hidden="true">#</a></h2><h3 id="预编译安装" tabindex="-1">预编译安装 <a class="header-anchor" href="#预编译安装" aria-hidden="true">#</a></h3><ul><li><strong>Mac</strong> or <strong>Linux</strong></li></ul><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">wget</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-O</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gf</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://github.com/gogf/gf/releases/latest/download/gf_</span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">go</span><span style="color:#C3E88D;"> env GOOS</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">_</span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">go</span><span style="color:#C3E88D;"> env GOARCH</span><span style="color:#89DDFF;">)&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">chmod</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">+x</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gf</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span></span>
<span class="line"><span style="color:#82AAFF;">.</span><span style="color:#FFCB6B;">/gf</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-y</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">rm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./gf</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>Windows</strong></li></ul><p>下载对应的二进制文件，双击按照终端指令安装即可。如果双击安装失败，请采用最后万能的手动编译安装方式。</p><h3 id="手动编译" tabindex="-1">手动编译 <a class="header-anchor" href="#手动编译" aria-hidden="true">#</a></h3><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clone</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://github.com/gogf/gf</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gf/cmd/gf</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">go</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span></span>
<span class="line"></span></code></pre></div><h3 id="验证安装成功" tabindex="-1">验证安装成功 <a class="header-anchor" href="#验证安装成功" aria-hidden="true">#</a></h3><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">gf</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-v</span></span>
<span class="line"></span></code></pre></div><p>显示类似于如下的信息为安装成功</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">GoFrame CLI Tool v2.1.4, https://goframe.org</span></span>
<span class="line"><span style="color:#A6ACCD;">GoFrame Version: cannot find go.mod</span></span>
<span class="line"><span style="color:#A6ACCD;">CLI Installed At: /opt/homebrew/bin/gf</span></span>
<span class="line"><span style="color:#A6ACCD;">CLI Built Detail:</span></span>
<span class="line"><span style="color:#A6ACCD;">Go Version:  go1.17.13</span></span>
<span class="line"><span style="color:#A6ACCD;">GF Version:  v2.1.4</span></span>
<span class="line"><span style="color:#A6ACCD;">Git Commit:  2022-08-26 15:45:41 a0619f7ff0e1d7766884e3062d1b3b0947c87da4</span></span>
<span class="line"><span style="color:#A6ACCD;">Build Time:  2022-08-26 15:51:38</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="help-查看帮助" tabindex="-1">Help 查看帮助 <a class="header-anchor" href="#help-查看帮助" aria-hidden="true">#</a></h2><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">gf</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-h</span></span>
<span class="line"></span></code></pre></div><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">USAGE</span></span>
<span class="line"><span style="color:#A6ACCD;">    gf COMMAND [OPTION]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">COMMAND</span></span>
<span class="line"><span style="color:#A6ACCD;">    env        show current Golang environment variables</span></span>
<span class="line"><span style="color:#A6ACCD;">    run        running go codes with hot-compiled-like feature</span></span>
<span class="line"><span style="color:#A6ACCD;">    gen        automatically generate go files for dao/do/entity/pb/pbentity</span></span>
<span class="line"><span style="color:#A6ACCD;">    tpl        template parsing and building commands</span></span>
<span class="line"><span style="color:#A6ACCD;">    init       create and initialize an empty GoFrame project</span></span>
<span class="line"><span style="color:#A6ACCD;">    pack       packing any file/directory to a resource file, or a go file</span></span>
<span class="line"><span style="color:#A6ACCD;">    build      cross-building go project for lots of platforms</span></span>
<span class="line"><span style="color:#A6ACCD;">    docker     build docker image for current GoFrame project</span></span>
<span class="line"><span style="color:#A6ACCD;">    install    install gf binary to system (might need root/admin permission)</span></span>
<span class="line"><span style="color:#A6ACCD;">    version    show version information of current binary</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">OPTION</span></span>
<span class="line"><span style="color:#A6ACCD;">    -y, --yes       all yes for all command without prompt ask</span></span>
<span class="line"><span style="color:#A6ACCD;">    -v, --version   show version information of current binary</span></span>
<span class="line"><span style="color:#A6ACCD;">    -d, --debug     show internal detailed debugging information</span></span>
<span class="line"><span style="color:#A6ACCD;">    -h, --help      more information about this command</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">ADDITIONAL</span></span>
<span class="line"><span style="color:#A6ACCD;">    Use &quot;gf COMMAND -h&quot; for details about a command.</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><blockquote><p>任何不懂的，就用help看看吧。</p></blockquote><h2 id="version-查看版本" tabindex="-1">Version 查看版本 <a class="header-anchor" href="#version-查看版本" aria-hidden="true">#</a></h2><p><code>gf -v </code>或<code>gf version</code></p><p>用以查看当前gf命令行工具编译时的版本信息，包括当前目录下的框架版本信息，框架安装目录，go版本信息等等</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">GoFrame Version: cannot find go.mod</span></span>
<span class="line"><span style="color:#A6ACCD;">CLI Installed At: /opt/homebrew/bin/gf</span></span>
<span class="line"><span style="color:#A6ACCD;">CLI Built Detail:</span></span>
<span class="line"><span style="color:#A6ACCD;">Go Version:  go1.17.13</span></span>
<span class="line"><span style="color:#A6ACCD;">GF Version:  v2.1.4</span></span>
<span class="line"><span style="color:#A6ACCD;">Git Commit:  2022-08-26 15:45:41 a0619f7ff0e1d7766884e3062d1b3b0947c87da4</span></span>
<span class="line"><span style="color:#A6ACCD;">Build Time:  2022-08-26 15:51:38</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="init-创建项目" tabindex="-1">Init 创建项目 <a class="header-anchor" href="#init-创建项目" aria-hidden="true">#</a></h2><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">gf</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">init</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">项目目</span><span style="color:#A6ACCD;">录</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">-u</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">-m</span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span></code></pre></div><p>我们可以使用<code>init</code>命令在当前目录生成一个示例的<code>GoFrame</code>空框架项目，并可给定项目名称参数。生成的项目目录结构仅供参考，根据业务项目具体情况可自行调整。生成的目录结构请参考 代码分层设计 章节, -u表示升级,默认是2.0.6，-u升级到最新版，-m使用表示多应用(大仓)的项目</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>GoFrame框架开发推荐统一使用官方的go module特性进行依赖包管理，因此空项目根目录下也有一个go.mod文件。</p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>工程目录采用了通用化的设计，实际项目中可以根据项目需要适当增减模板给定的目录。例如，没有kubernetes部署需求的场景，直接删除对应deploy目录即可。</p></div><h2 id="build-交叉编译" tabindex="-1">Build 交叉编译 <a class="header-anchor" href="#build-交叉编译" aria-hidden="true">#</a></h2><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">gf</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">入口文件</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">-n 输出二进制文件名字</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">-v 输出二进制文件版本</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">-a 系统架构</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">-s 欲构建系统</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">-o 输出路径</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">...</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span></code></pre></div><p>该命令支持配置，配置选项的释义同命令行同名选项。</p><table><thead><tr><th>名称</th><th>必须</th><th>默认值</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td>arch</td><td>否</td><td>当前系统架构</td><td>编译架构，多个以,号分隔，如果是all表示编译所有支持架构</td><td>386,amd64,arm</td></tr><tr><td>cgo <sup><code>[1]</code></sup></td><td>否</td><td>0</td><td>是否开启CGO，默认是关闭的。如果开启，那么交叉编译可能会有问题。</td><td>0</td></tr><tr><td>extra</td><td>否</td><td></td><td>额外自定义的编译参数，会直接传递给go build命令</td><td></td></tr><tr><td>mod</td><td>否</td><td></td><td>同go build -mod编译选项，不常用</td><td>none</td></tr><tr><td>name</td><td>否</td><td>与程序入口go文件同名</td><td>生成的可执行文件名称。如果是windows平台，那么默认会加上.exe后缀</td><td>gf</td></tr><tr><td>output</td><td>否</td><td></td><td>输出的可执行文件路径，当该参数指定时，name和path参数失效，常用于编译单个可执行文件</td><td>./bin/gf.exe</td></tr><tr><td>packSrc<sup><code>[2]</code></sup></td><td>否</td><td></td><td>需要打包的目录，多个以,号分隔，生成到internal/packed/build_pack_data.go</td><td>public,template</td></tr><tr><td>path</td><td>否</td><td>./bin</td><td>编译可执行文件存储的目录地址</td><td>./bin</td></tr><tr><td>system</td><td>否</td><td>当前系统平台</td><td>编译平台，多个以,号分隔，如果是all表示编译所有支持平台</td><td>linux,darwin,windows</td></tr><tr><td>varMap</td><td>否</td><td></td><td>自定义的内置变量键值对</td><td>gfcli:<br> build:<br>  name: &quot;gf&quot;<br>   arch: &quot;all&quot;<br>   system: &quot;all&quot;<br>   mod: &quot;none&quot;<br>   cgo: 0<br>   pack: &quot;&quot;<br>   version: &quot;v1.0.0&quot;<br>   output: &quot;./bin&quot;<br>   extra: &quot;&quot;<br>   varMap:<br>    k1: v1<br>    k2: v2</td></tr><tr><td>version</td><td>否</td><td></td><td>程序版本，如果指定版本信息，那么程序生成的路径中会多一层以版本名称的目录</td><td>v1.0.0</td></tr></tbody></table><p>支持的系统架构</p><table><thead><tr><th>系统</th><th>架构</th></tr></thead><tbody><tr><td>darwin</td><td>amd64</td></tr><tr><td>darwin</td><td>arm64</td></tr><tr><td>ios</td><td>amd64</td></tr><tr><td>ios</td><td>arm64</td></tr><tr><td>freebsd</td><td>386</td></tr><tr><td>freebsd</td><td>amd64</td></tr><tr><td>freebsd</td><td>arm</td></tr><tr><td>netbsd</td><td>386</td></tr><tr><td>netbsd</td><td>amd64</td></tr><tr><td>netbsd</td><td>arm</td></tr><tr><td>openbsd</td><td>386</td></tr><tr><td>openbsd</td><td>amd64</td></tr><tr><td>openbsd</td><td>arm</td></tr><tr><td>windows</td><td>386</td></tr><tr><td>windows</td><td>amd64</td></tr><tr><td>android</td><td>arm</td></tr><tr><td>dragonfly</td><td>amd64</td></tr><tr><td>plan9</td><td>386</td></tr><tr><td>plan9</td><td>amd64</td></tr><tr><td>solaris</td><td>amd64</td></tr><tr><td>linux</td><td>386</td></tr><tr><td>linux</td><td>amd64</td></tr><tr><td>linux</td><td>arm</td></tr><tr><td>linux</td><td>arm64</td></tr><tr><td>linux</td><td>ppc64</td></tr><tr><td>linux</td><td>ppc64le</td></tr><tr><td>linux</td><td>mips</td></tr><tr><td>linux</td><td>mipsle</td></tr><tr><td>linux</td><td>mips64</td></tr><tr><td>linux</td><td>mips64le</td></tr></tbody></table><p><code>[1]</code>: cgo开启后，可能不支持交叉编译，可以只用<code>xgo</code>来进行交叉编译<br><code>[2]</code>: 1: 打包，多人反应可能有问题，建议手动执行<code>gf pack</code> 命令<br>    2: 官方文档与实际代码不一致 实际代码：</p><table><thead><tr><th>名称</th><th>必须</th><th>默认值</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td>packSrc</td><td>否</td><td></td><td>需要打包的源路径</td><td></td></tr><tr><td>packDst</td><td>否</td><td></td><td>打包到哪里</td><td></td></tr></tbody></table><h2 id="gen-代码生成" tabindex="-1">Gen 代码生成 <a class="header-anchor" href="#gen-代码生成" aria-hidden="true">#</a></h2><h3 id="服务" tabindex="-1">服务 <a class="header-anchor" href="#服务" aria-hidden="true">#</a></h3><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">gf</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">den</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">service</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">注意</p><p>先编写逻辑代码，再生成相应的服务接口</p></div><table><thead><tr><th>名称</th><th>必须</th><th>默认值</th><th>含义</th></tr></thead><tbody><tr><td>srcFolder</td><td>是</td><td>internal/logic</td><td>指向logic代码目录地址</td></tr><tr><td>dstFolder</td><td>是</td><td>internal/service</td><td>指向生成的接口文件存放目录</td></tr><tr><td>stPattern</td><td>是</td><td>s([A-A]\\w+)</td><td>使用正则指定业务模块结构体定义格式，便于解析业务接口定义名称。在默认的正则下，所有小写s开头，大写字母随后的结构体都将被当做业务模块接口名称。例如：</td></tr><tr><td>watchFile</td><td>否</td><td></td><td>用在代码文件监听中，代表当前改变的代码文件路径</td></tr><tr><td>packages</td><td>否</td><td></td><td>仅生成指定包名的接口文件，给定字符串数组，通过命令行传参则给定JSON字符串，命令行组件自动转换数据类型</td></tr><tr><td>importPrefix</td><td>否</td><td></td><td>指定生成业务引用文件中的引用包名前缀</td></tr><tr><td>overwrite</td><td>否</td><td>true</td><td>生成代码文件时是否覆盖已有文件</td></tr></tbody></table><h4 id="手动模式" tabindex="-1">手动模式 <a class="header-anchor" href="#手动模式" aria-hidden="true">#</a></h4><p>如果是手动执行命令行，直接在项目根目录下执行 <code>gf gen service</code> 即可。</p><h4 id="自动模式" tabindex="-1">自动模式 <a class="header-anchor" href="#自动模式" aria-hidden="true">#</a></h4><p>如果您是使用的GolandIDE，那么可以使用我们提供的配置文件：<a href="/files/watchers.xml">watchers.xml</a> 自动监听代码文件修改时自动生成接口文件。使用方式，如下图： <img src="`+n+'" alt="gen-service-1"></p><h4 id="具体使用手摸手" tabindex="-1">具体使用手摸手 <a class="header-anchor" href="#具体使用手摸手" aria-hidden="true">#</a></h4><ol><li>我们建议您在使用Goland IDE时，使用我们提供的配置文件：<a href="/files/watchers.xml">watchers.xml</a></li><li>编写您的业务逻辑代码<br><img src="'+l+'" alt="gen-service-2"></li><li>生成接口及服务注册文件<br>如果您已经按照Step1做好了配置，那么这一步可以忽略。因为在您编写代码的时候，<code>service</code> 便同时生成了接口定义文件。<br>否则，每一次在您开发/更新完成<code>logic</code>业务模块后，您需要手动执行一下 <code>gf gen service</code> 命令<img src="'+o+'" alt="en-service-3"></li><li>注意服务的实现注入部分（仅一次）<br> 只有在生成完成接口文件后，您才能在每个业务模块中加上接口的具体实现注入。该方法每个业务模块加一次即可。<img src="'+d+'" alt="gen-service-4"></li><li>在启动文件中引用接口实现注册（仅一次）<br> 该文件的引入需要在<code>main</code>包的最顶部引入，需要注意<code>import</code> 的顺序，放到最顶部，后面加一个空行。如果同时存在<code>packed</code>包的引入，那么放到<code>packed</code> 包后面。像这样：<img src="'+p+'" alt="gen-service-5"> 可以发现，该命令除了生成接口文件之外，还生成了一个接口实现注册文件。该文件用于在程序启动时，将接口的具体实现在启动时执行注册。<img src="'+r+`" alt="gen-service-6"></li><li>Start&amp;Enjoy<br>启动<code>main.go</code>即可。</li></ol><h3 id="dao" tabindex="-1">dao <a class="header-anchor" href="#dao" aria-hidden="true">#</a></h3><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">gf</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">den</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dao</span></span>
<span class="line"></span></code></pre></div><table><thead><tr><th>名称</th><th>必须</th><th>默认值</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td>gfcli.gen.dao</td><td>是</td><td></td><td><code>dao</code>代码生成配置项，可以有多个配置项构成数组，支持多个数据库生成。不同的数据库可以设置不同的生成规则，例如可以生成到不同的位置或者文件。</td><td>-</td></tr><tr><td>link</td><td>是</td><td></td><td>分为两部分，第一部分表示你连接的数据库类型mysql, postgresql等, 第二部分就是连接数据库的dsn信息。具体请参考 ORM使用配置 章节。</td><td>-</td></tr><tr><td>path</td><td>否</td><td>internal</td><td>生成<code>dao</code>和<code>model</code>文件的存储目录地址。</td><td>./app</td></tr><tr><td>group</td><td>否</td><td>default</td><td>在数据库配置中的数据库分组名称。只能配置一个名称。数据库在配置文件中的分组名称往往确定之后便不再修改。</td><td>default,order,user</td></tr><tr><td>prefix</td><td>否</td><td></td><td>生成数据库对象及文件的前缀，以便区分不同数据库或者不同数据库中的相同表名，防止数据表同名覆盖。</td><td>order_,user_</td></tr><tr><td>removePrefix</td><td>否</td><td></td><td>删除数据表的指定前缀名称。多个前缀以<code>,</code>号分隔。</td><td>gf_</td></tr><tr><td>tables</td><td>否</td><td></td><td>指定当前数据库中需要执行代码生成的数据表。如果为空，表示数据库的所有表都会生成。</td><td>user, user_detail</td></tr><tr><td>tablesEx</td><td>否</td><td></td><td><code>Tables Excluding</code>，指定当前数据库中需要排除代码生成的数据表。</td><td>product, order</td></tr><tr><td>jsonCase</td><td>否</td><td>CamelLower</td><td>指定<code>model</code>中生成的数据实体对象中<code>json</code>标签名称规则，参数不区分大小写。参数可选为：<code>Camel</code>、<code>CamelLower</code>、<code>Snake</code>、<code>SnakeScreaming</code>、<code>SnakeFirstUpper</code>、<code>Kebab</code>、<code>KebabScreaming</code>。具体介绍请参考命名行帮助示例。</td><td>Snake</td></tr><tr><td>stdTime</td><td>否</td><td>false</td><td>当数据表字段类型为时间类型时，代码生成的属性类型使用标准库的<code>time.Time</code>而不是框架的<code>*gtime.Time</code>类型。</td><td>true</td></tr><tr><td>gJsonSupport</td><td>否</td><td>false</td><td>当数据表字段类型为<code>JSON</code>类型时，代码生成的属性类型使用<code>*gjson.Json</code>类型。</td><td>true</td></tr><tr><td>overwriteDao</td><td>否</td><td>false</td><td>每次生成<code>dao</code>代码时是否重新生成覆盖<code>dao/internal</code>目录外层的文件。注意<code>dao/internal</code>目录外层的文件可能由开发者自定义扩展了功能，覆盖可能会产生风险。</td><td>true</td></tr><tr><td>importPrefix</td><td>否</td><td>通过go.mod自动检测</td><td>用于指定生成<code>Go</code>文件的<code>import</code>路径前缀。特别是针对于不是在项目根目录下使用<code>gen dao</code>命令，或者想要将代码文件生成到自定义的其他目录，这个时候配置该参数十分必要。</td><td><a href="http://github.com/gogf/gf" target="_blank" rel="noreferrer">github.com/gogf/gf</a></td></tr><tr><td>descriptionTag</td><td>否</td><td>false</td><td>用于指定是否为数据模型结构体属性增加<code>desription</code>的标签，内容为对应的数据表字段注释。</td><td>true</td></tr><tr><td>noModelComment</td><td>否</td><td>false</td><td>用于指定是否关闭数据模型结构体属性的注释自动生成，内容为数据表对应字段的注释。</td><td>true</td></tr></tbody></table><h4 id="jsoncase-选项示例" tabindex="-1">jsoncase 选项示例 <a class="header-anchor" href="#jsoncase-选项示例" aria-hidden="true">#</a></h4><table><thead><tr><th>Case</th><th>Example</th></tr></thead><tbody><tr><td>Camel</td><td>AnyKindOfString</td></tr><tr><td>CamelLower(默认)</td><td>anyKindOfString</td></tr><tr><td>Snake</td><td>any_kind_of_string</td></tr><tr><td>SnakeScreaming</td><td>ANY_KIND_OF_STRING</td></tr><tr><td>SnakeFirstUpper</td><td>rgb_code_md5</td></tr><tr><td>Kebab</td><td>any-kind-of-string</td></tr><tr><td>KebabScreaming</td><td>ANY-KIND-OF-STRING</td></tr></tbody></table><h4 id="使用示例" tabindex="-1">使用示例 <a class="header-anchor" href="#使用示例" aria-hidden="true">#</a></h4><p>仓库地址：<a href="https://github.com/gogf/focus-single" target="_blank" rel="noreferrer">https://github.com/gogf/focus-single</a><img src="`+c+'" alt="gen-dao-1"></p><p>1、以下3个目录的文件由dao命令生成：</p><table><thead><tr><th>路径</th><th>说明</th><th>详细介绍</th></tr></thead><tbody><tr><td>/internal/dao</td><td>数据操作对象</td><td>通过对象方式访问底层数据源，底层基于ORM组件实现。往往需要结合<code>entity</code>和<code>do</code>通用使用。该目录下的文件开发者可扩展修改，但是往往没这种必要。</td></tr><tr><td>/internal/model/do</td><td>数据转换模型</td><td>数据转换模型用于业务模型到数据模型的转换，由工具维护，用户不能修改。<br>工具每次生成代码文件将会覆盖该目录。</td></tr><tr><td>/internal/model/entity</td><td>数据模型</td><td>数据模型由工具维护，用户不能修改。工具每次生成代码文件将会覆盖该目录。</td></tr></tbody></table><p>2、model中的模型分为两类：<strong>数据模型</strong>和<strong>业务模型</strong>。</p><p><strong>数据模型</strong>：通过CLI工具自动生成 model/entity 目录文件，数据库的数据表都会生成到该目录下，这个目录下的文件对应的模型为数据模型。数据模型即与数据表一一对应的数据结构，开发者往往不需要去修改并且也不应该去修改，数据模型只有在数据表结构变更时通过CLI工具自动更新。数据模型由CLI工具生成及统一维护。</p><p><strong>业务模型</strong>：业务模型即是与业务相关的数据结构，按需定义，例如service的输入输出数据结构定义、内部的一些数据结构定义等。业务模型由开发者根据业务需要自行定义维护，定义到model目录下。</p><p>3、dao中的文件按照数据表名称进行命名，一个数据表一个文件及其一个对应的DAO对象。操作数据表即是通过DAO对象以及相关操作方法实现。dao操作采用规范化设计，必须传递ctx参数，并在生成的代码中必须通过Ctx或者Transaction方法创建对象来链式操作数据表。 <img src="'+i+'" alt="gen-dao-2"></p><h4 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-hidden="true">#</a></h4><h6 id="需要手动编译的数据库类型" tabindex="-1">需要手动编译的数据库类型 <a class="header-anchor" href="#需要手动编译的数据库类型" aria-hidden="true">#</a></h6><p><code>gen dao</code>命令涉及到数据访问相关代码生成时，默认支持常用的若干类型数据库。如果需要<code>Oracle</code>数据库类型支持，需要开发者自己修改源码文件后自行本地手动编译生成<code>CLI</code>工具随后安装，因为这两个数据库的驱动需要<code>CGO</code>支持，无法预编译生成给大家直接使用。 <img src="'+h+'" alt="gen-dao-3"></p><h6 id="关于bool类型对应的数据表字段" tabindex="-1">关于<code>bool</code>类型对应的数据表字段 <a class="header-anchor" href="#关于bool类型对应的数据表字段" aria-hidden="true">#</a></h6><p>由于大部分数据库类型都没有<code>bool</code>类型的数据表字段类型，我们推荐使用<code>bit(1)</code>来代替<code>bool</code>类型。<code>gen dao</code>命令会自动识别<code>bit(1)</code>数据表字段并生成<code>bool</code>类型的属性。此外，我们不推荐使用<code>tinyint(1)</code>作为<code>bool</code>类型。</p><p>例如，表字段： <img src="'+C+'" alt="gen-dao-4"></p><p>生成的属性： <img src="'+g+`" alt="gen-dao-5"></p><h2 id="run-自动编译" tabindex="-1">Run 自动编译 <a class="header-anchor" href="#run-自动编译" aria-hidden="true">#</a></h2><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">gf</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">入口文</span><span style="color:#A6ACCD;">件</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">-p 输出目录</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">-e 编译参数</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">-a 运行参数</span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span></code></pre></div><h3 id="注意事项-1" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项-1" aria-hidden="true">#</a></h3><blockquote><p>由于Go是不支持热编译特性的，每一次代码变更后都要重新手动停止、编译、运行代码文件。run命令也不是实现热编译功能，而是提供了自动编译功能，当开发者修改了项目中的go文件时，该命令将会自动编译当前程序，并停止原有程序，运行新版的程序。</p></blockquote><blockquote><p>run命令会递归监控当前运行目录的所有go文件变化来实现自动编译。</p></blockquote><p>-p 表示输出路径，默认是当前目录<br> -e 表示编译选型<br> -a 表示运行所需要的参数</p><h2 id="pack-资源打包" tabindex="-1">Pack 资源打包 <a class="header-anchor" href="#pack-资源打包" aria-hidden="true">#</a></h2><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">gf</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pack</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">欲打包的文件或目</span><span style="color:#A6ACCD;">录</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">打包后的结</span><span style="color:#A6ACCD;">果</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">-n</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">-p</span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span></code></pre></div><p>-n：输出的文件名如果没有提供则默认使用目录名<br> -p：装入资源文件中的每个文件添加前缀</p><h2 id="docker-镜像编译" tabindex="-1">Docker 镜像编译 <a class="header-anchor" href="#docker-镜像编译" aria-hidden="true">#</a></h2><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">gf</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">入口文</span><span style="color:#A6ACCD;">件</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">-f dockerfile的文件路径</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">-s 在docker build 执行之前需要被执行的shell文件</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">-b 在docker映像构建之前</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">-tn docker镜像标签内容 </span><span style="color:#89DDFF;">][</span><span style="color:#A6ACCD;">tp docker镜像的tag前缀</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">-p </span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">-e docker构建的参数 </span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span></code></pre></div><p>该命令支持配置<br></p><table><thead><tr><th>名称</th><th>必须</th><th>默认值</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td>file</td><td>否</td><td>manifest/docker/Dockerfile</td><td>dockerfile 文件所在路径</td><td></td></tr><tr><td>shell</td><td>否</td><td>manifest/docker/docker.sh</td><td>docker build之前需要被执行的shell文件路径</td><td></td></tr><tr><td>build</td><td>否</td><td>-a amd64 -s linux</td><td>二进制配置信息</td><td></td></tr><tr><td>tagName</td><td>否</td><td></td><td>构建镜像的tag前缀</td><td></td></tr><tr><td>tagPrefixes</td><td>否</td><td></td><td>构建镜像的tag名称</td><td></td></tr><tr><td>push</td><td>否</td><td></td><td>自动推送到 docker registry</td><td></td></tr><tr><td>extra</td><td>否</td><td></td><td>docker image的扩展参数</td><td></td></tr></tbody></table><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">USAGE</span></span>
<span class="line"><span style="color:#A6ACCD;">    gf docker [MAIN] [OPTION]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">ARGUMENT</span></span>
<span class="line"><span style="color:#A6ACCD;">    MAIN    main file path for &quot;gf build&quot;, it&#39;s &quot;main.go&quot; in default. empty string for no binary build</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">OPTION</span></span>
<span class="line"><span style="color:#A6ACCD;">    -f, --file           file path of the Dockerfile. it&#39;s &quot;manifest/docker/Dockerfile&quot; in default</span></span>
<span class="line"><span style="color:#A6ACCD;">    -s, --shell          path of the shell file which is executed before docker build</span></span>
<span class="line"><span style="color:#A6ACCD;">    -b, --build          binary build options before docker image build, it&#39;s &quot;-a amd64 -s linux&quot; in default</span></span>
<span class="line"><span style="color:#A6ACCD;">    -tn, --tagName       tag name for this docker, pattern like &quot;image:tag&quot;. this option is required with TagPrefixes</span></span>
<span class="line"><span style="color:#A6ACCD;">    -tp, --tagPrefixes   tag prefixes for this docker, which are used for docker push. this option is required with</span></span>
<span class="line"><span style="color:#A6ACCD;">                         TagName</span></span>
<span class="line"><span style="color:#A6ACCD;">    -p, --push           auto push the docker image to docker registry if &quot;-t&quot; option passed</span></span>
<span class="line"><span style="color:#A6ACCD;">    -e, --extra          extra build options passed to &quot;docker image&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    -h, --help           more information about this command</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">EXAMPLE</span></span>
<span class="line"><span style="color:#A6ACCD;">    gf docker</span></span>
<span class="line"><span style="color:#A6ACCD;">    gf docker -t hub.docker.com/john/image:tag</span></span>
<span class="line"><span style="color:#A6ACCD;">    gf docker -p -t hub.docker.com/john/image:tag</span></span>
<span class="line"><span style="color:#A6ACCD;">    gf docker main.go</span></span>
<span class="line"><span style="color:#A6ACCD;">    gf docker main.go -t hub.docker.com/john/image:tag</span></span>
<span class="line"><span style="color:#A6ACCD;">    gf docker main.go -t hub.docker.com/john/image:tag</span></span>
<span class="line"><span style="color:#A6ACCD;">    gf docker main.go -p -t hub.docker.com/john/image:tag</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">DESCRIPTION</span></span>
<span class="line"><span style="color:#A6ACCD;">    The &quot;docker&quot; command builds the GF project to a docker images.</span></span>
<span class="line"><span style="color:#A6ACCD;">    It runs &quot;gf build&quot; firstly to compile the project to binary file.</span></span>
<span class="line"><span style="color:#A6ACCD;">    It then runs &quot;docker build&quot; command automatically to generate the docker image.</span></span>
<span class="line"><span style="color:#A6ACCD;">    You should have docker installed, and there must be a Dockerfile in the root of the project.</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div>`,85),D=[A];function u(m,b,f,F,k,v){return a(),s("div",null,D)}const q=t(y,[["render",u]]);export{_ as __pageData,q as default};
