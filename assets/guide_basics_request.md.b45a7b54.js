import{_ as s,c as a,o as n,d as o}from"./app.ce21e48a.js";const A=JSON.parse('{"title":"请求","description":"","frontmatter":{},"headers":[{"level":2,"title":"请求简介","slug":"请求简介","link":"#请求简介","children":[{"level":3,"title":"提交类型","slug":"提交类型","link":"#提交类型","children":[]},{"level":3,"title":"参数优先级","slug":"参数优先级","link":"#参数优先级","children":[]}]},{"level":2,"title":"复杂参数","slug":"复杂参数","link":"#复杂参数","children":[{"level":3,"title":"同名参数","slug":"同名参数","link":"#同名参数","children":[]},{"level":3,"title":"数组参数","slug":"数组参数","link":"#数组参数","children":[]},{"level":3,"title":"Map参数","slug":"map参数","link":"#map参数","children":[]}]},{"level":2,"title":"对象处理","slug":"对象处理","link":"#对象处理","children":[{"level":3,"title":"对象转换","slug":"对象转换","link":"#对象转换","children":[]},{"level":3,"title":"参数映射","slug":"参数映射","link":"#参数映射","children":[]},{"level":3,"title":"Parse 转换","slug":"parse-转换","link":"#parse-转换","children":[]}]},{"level":2,"title":"请求校验","slug":"请求校验","link":"#请求校验","children":[]},{"level":2,"title":"JSON/XML","slug":"json-xml","link":"#json-xml","children":[]},{"level":2,"title":"默认值绑定","slug":"默认值绑定","link":"#默认值绑定","children":[]},{"level":2,"title":"自定义变量","slug":"自定义变量","link":"#自定义变量","children":[]},{"level":2,"title":"Context","slug":"context","link":"#context","children":[{"level":3,"title":"方法列表","slug":"方法列表","link":"#方法列表","children":[]}]},{"level":2,"title":"文件上传","slug":"文件上传","link":"#文件上传","children":[]}],"relativePath":"guide/basics/request.md","lastUpdated":1675081585000}'),e={name:"guide/basics/request.md"},l=o(`<h1 id="请求" tabindex="-1">请求 <a class="header-anchor" href="#请求" aria-hidden="true">#</a></h1><p>请求输入依靠 <code>ghttp.Request</code> 对象实现，<code>ghttp.Request</code>继承了底层的 <code>http.Request</code>对象</p><p>相关方法: <a href="https://pkg.go.dev/github.com/gogf/gf/v2/net/ghttp#Request" target="_blank" rel="noreferrer">https://pkg.go.dev/github.com/gogf/gf/v2/net/ghttp#Request</a></p><h2 id="请求简介" tabindex="-1">请求简介 <a class="header-anchor" href="#请求简介" aria-hidden="true">#</a></h2><h3 id="提交类型" tabindex="-1">提交类型 <a class="header-anchor" href="#提交类型" aria-hidden="true">#</a></h3><p><code>GoFrame</code>框架的参数获取不是通过 <code>HTTP Method</code>来做区分，而是通过参数提交类型来区分。例如，分别通过 <code>HTTP Method: POST、INPUT、DELETE</code>来提交表单参数，在服务端获取参数不是通过 <code>GetPost</code>/<code>GetInput</code>/<code>GetDelete</code>的方式来获取，而是统一通过 <code>GetForm</code>方法来获取表单参数，针对其他的 <code>HTTP Method</code>也是如此。</p><p>在 <code>GoFrame</code>框架下，有以下几种提交类型：</p><ol><li><code>Router</code>: 路由参数，来源于路由规则匹配</li><li><code>Query</code>: <code>URL</code>中的 <code>Query String</code>参数解析</li><li><code>Form</code>: 表单提交参数，最常见的提交方式，提交的 <code>Content-Type</code>往往为：<code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code>、<code>multipart/mixed</code>。</li><li><code>Body</code>: 原始提交内容，从 <code>Body</code>中获取并解析得到的参数，<code>JSON</code>/<code>XML</code>请求往往使用这种方式提交。</li><li><code>Custom</code>: 自定义参数，往往在服务端的中间件、服务函数中通过 <code>SetParam/GetParam</code>方法管理。</li></ol><p>获取的参数方法可以对指定键名的数据进行自动类型转换, 获取到的参数都是泛型变量，根据该泛型变量再根据需要调用对应的方法转换为对应的数据类型。</p><h3 id="参数优先级" tabindex="-1">参数优先级 <a class="header-anchor" href="#参数优先级" aria-hidden="true">#</a></h3><p>在 <code>GoFrame</code>框架下，我们根据不同的获取方法，将会按照不同的优先级进行获取，优先级高的方式提交的参数将会优先覆盖其他方式的同名参数。优先级规则如下：</p><ol><li><code>Get</code>及 <code>GetRequset</code>方法：<code>Router &lt; Query &lt; Body &lt; Form &lt; Custom</code>，也就是说自定义参数的优先级最高，其次是 <code>Form</code>表单参数，再次是 <code>Body</code>提交参数，以此类推。例如，<code>Query</code>和 <code>Form</code>中都提交了同样名称的参数 <code>id</code>，参数值分别为 <code>1</code>和 <code>2</code>，那么 <code>Get(&quot;id&quot;)</code>/<code>GetForm(&quot;id&quot;)</code>将会返回 <code>2</code>，而 <code>GetQuery(&quot;id&quot;)</code>将会返回 <code>1</code>。</li><li><code>GetQuery</code>方法：<code>Query &gt; Body</code>，也就是说 <code>query string</code>的参数将会覆盖 <code>Body</code>中提交的同名参数。例如，<code>Query</code>和 <code>Body</code>中都提交了同样名称的参数 <code>id</code>，参数值分别为 <code>1</code>和 <code>2</code>，那么 <code>Get(&quot;id&quot;)</code>将会返回 <code>2</code>，而 <code>GetQuery(&quot;id&quot;)</code>将会返回 <code>1</code>。</li><li><code>GetForm</code>方法：由于该类型的方法仅用于获取 <code>Form</code>表单参数，因此没什么优先级的差别。</li></ol><h2 id="复杂参数" tabindex="-1">复杂参数 <a class="header-anchor" href="#复杂参数" aria-hidden="true">#</a></h2><p><code>ghttp.Request</code>对象支持智能的参数类型解析（不区分请求提交方式及请求提交类型），以下为提交参数示例以及服务端对应解析的变量类型</p><table><thead><tr><th>Parameter</th><th>Variable</th></tr></thead><tbody><tr><td><code>k1=m&amp;k2=n</code></td><td><code>map[k1:m k2:n]</code></td></tr><tr><td><code>k=m&amp;k=n</code></td><td><code>map[k:n]</code></td></tr><tr><td><code>k=m&amp;k[a]=n</code></td><td><code>error</code></td></tr><tr><td><code>k[]=m&amp;k[]=n</code></td><td><code>map[k:[m n]]</code></td></tr><tr><td><code>k[a]=m&amp;k[b]=n</code></td><td><code>map[k:map[a:m b:n]]</code></td></tr><tr><td><code>k[a][]=m&amp;k[a][]=n</code></td><td><code>map[k:map[a:[m n]]]</code></td></tr><tr><td><code>k[a][a]=m&amp;k[a][b]=n</code></td><td><code>map[k:map[a:map[a:m b:n]]]</code></td></tr></tbody></table><h3 id="同名参数" tabindex="-1">同名参数 <a class="header-anchor" href="#同名参数" aria-hidden="true">#</a></h3><p>同名参数提交格式为: k=v1&amp;k=v2, 后续的变量值将会覆盖前面的变量值</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>需要注意的是，在标准库 <code>net/http</code>处理中，提交的同名参数将会被转换为字符串数组。</p></div><h3 id="数组参数" tabindex="-1">数组参数 <a class="header-anchor" href="#数组参数" aria-hidden="true">#</a></h3><p>提交格式为: k[]=v1&amp;k1[]=v2</p><h3 id="map参数" tabindex="-1">Map参数 <a class="header-anchor" href="#map参数" aria-hidden="true">#</a></h3><p>提交格式为: k[a]=1&amp;k[b]=2, 并且支持多级Map, 例如: k[a][a]=1&amp;k[a][b]=2</p><h2 id="对象处理" tabindex="-1">对象处理 <a class="header-anchor" href="#对象处理" aria-hidden="true">#</a></h2><h3 id="对象转换" tabindex="-1">对象转换 <a class="header-anchor" href="#对象转换" aria-hidden="true">#</a></h3><p>对象转换在请求处理中非常常见。我们推荐将输入和输出定义为 <code>struct</code>结构体对象，以便于结构化的参数输入输出维护。<code>GoFrame</code>框架支持非常便捷的对象转换，支持将客户端提交的参数如 <code>Query</code>参数、表单参数、内容参数、<code>JSON/XML</code>等参数非常便捷地转换为指定的 <code>struct</code>结构体，并且支持提交参数与 <code>struct</code>属性的映射关系维护。</p><p>对象转换方法使用 <code>Request</code>对象的 <code>Parse</code>方法或者 <code>Get*Struct</code>方法，具体方法定义请参考API文档： <a href="https://pkg.go.dev/github.com/gogf/gf/v2/net/ghttp#Request" target="_blank" rel="noreferrer">https://pkg.go.dev/github.com/gogf/gf/v2/net/ghttp#Request</a></p><h3 id="参数映射" tabindex="-1">参数映射 <a class="header-anchor" href="#参数映射" aria-hidden="true">#</a></h3><h4 id="默认规则" tabindex="-1">默认规则 <a class="header-anchor" href="#默认规则" aria-hidden="true">#</a></h4><p>客户端提交的参数如果需要映射到服务端定义的 <code>struct</code>属性上，可以采用默认的映射关系，这一点非常方便。默认的转换规则如下：</p><ol><li><code>struct</code>中需要匹配的属性必须为 <strong><code>公开属性</code></strong> (首字母大写)。</li><li>参数名称会自动按照 <strong><code>不区分大小写</code></strong> 且 <strong>忽略 <code>-/_/空格</code>符号</strong> 的形式与 <code>struct</code>属性进行匹配。</li><li>如果匹配成功，那么将键值赋值给属性，如果无法匹配，那么忽略该键值。</li></ol><p>示例:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">map键名    struct属性     是否匹配</span></span>
<span class="line"><span style="color:#A6ACCD;">name       Name           match</span></span>
<span class="line"><span style="color:#A6ACCD;">Email      Email          match</span></span>
<span class="line"><span style="color:#A6ACCD;">nickname   NickName       match</span></span>
<span class="line"><span style="color:#A6ACCD;">NICKNAME   NickName       match</span></span>
<span class="line"><span style="color:#A6ACCD;">Nick-Name  NickName       match</span></span>
<span class="line"><span style="color:#A6ACCD;">nick_name  NickName       match</span></span>
<span class="line"><span style="color:#A6ACCD;">nick name  NickName       match</span></span>
<span class="line"><span style="color:#A6ACCD;">NickName   Nick_Name      match</span></span>
<span class="line"><span style="color:#A6ACCD;">Nick-name  Nick_Name      match</span></span>
<span class="line"><span style="color:#A6ACCD;">nick_name  Nick_Name      match</span></span>
<span class="line"><span style="color:#A6ACCD;">nick name  Nick_Name      match</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>由于底层对象转换实现使用的是 <code>gconv</code>模块，因此也支持 <code>c/gconv/json</code>标签，更详细的规则可以参考请参考 <a href="#%E8%AF%B7%E6%B1%82%E7%AE%80%E4%BB%8B">类型转换-Struct转换</a>。</p></div><h4 id="自定义规则" tabindex="-1">自定义规则 <a class="header-anchor" href="#自定义规则" aria-hidden="true">#</a></h4><p>自定义的参数映射规则可以通过为 <code>struct</code>属性绑定 <code>tag</code>实现，<code>tag</code>名称可以为 <code>p/param/params</code></p><p>示例:</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">User</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct{</span></span>
<span class="line"><span style="color:#A6ACCD;">    Id    </span><span style="color:#C792EA;">int</span></span>
<span class="line"><span style="color:#A6ACCD;">    Name  </span><span style="color:#C792EA;">string</span></span>
<span class="line"><span style="color:#A6ACCD;">    Pass1 </span><span style="color:#C792EA;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">p:&quot;password1&quot;</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#A6ACCD;">    Pass2 </span><span style="color:#C792EA;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">p:&quot;password2&quot;</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>其中我们使用了 <code>p</code>标签来指定该属性绑定的参数名称。<code>password1</code>参数将会映射到 <code>Pass1</code>属性，<code>password2</code>将会映射到 <code>Pass2</code>属性上。其他属性采用默认的转换规则即可，无需设置 <code>tag</code>。</p><h3 id="parse-转换" tabindex="-1">Parse 转换 <a class="header-anchor" href="#parse-转换" aria-hidden="true">#</a></h3><p>我们同时可以使用 <code>Parse</code>方法来实现 <code>struct</code>的转换，该方法是一个便捷方法，内部会自动进行转换及数据校验，但如果 <code>struct</code>中没有校验 <code>tag</code>的绑定将不会执行校验逻辑。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>从 <code>GoFrame v2</code>版本开始，我们推荐使用结构化的方式来定义路由方法，更便捷地管理输入输出数据结构及其实例对象，具体请参考：<a href="./route.html#规范注册-推荐">路由注册-规范路由</a></p></div><h2 id="请求校验" tabindex="-1">请求校验 <a class="header-anchor" href="#请求校验" aria-hidden="true">#</a></h2><h2 id="json-xml" tabindex="-1">JSON/XML <a class="header-anchor" href="#json-xml" aria-hidden="true">#</a></h2><h2 id="默认值绑定" tabindex="-1">默认值绑定 <a class="header-anchor" href="#默认值绑定" aria-hidden="true">#</a></h2><h2 id="自定义变量" tabindex="-1">自定义变量 <a class="header-anchor" href="#自定义变量" aria-hidden="true">#</a></h2><h2 id="context" tabindex="-1">Context <a class="header-anchor" href="#context" aria-hidden="true">#</a></h2><p>请求流程往往会在上下文中共享一些自定义设置的变量，例如在请求开始之前通过中间件设置一些变量，随后在路由服务方法中可以获取该变量并相应对一些处理.</p><p>在 <code>GoFrame</code>框架中，我们推荐使用 <code>Context</code>上下文对象来处理流程共享的上下文变量，甚至将该对象进一步传递到依赖的各个模块方法中。</p><h3 id="方法列表" tabindex="-1">方法列表 <a class="header-anchor" href="#方法列表" aria-hidden="true">#</a></h3><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">r </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">Request</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">GetCtx</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> context</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Context</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">r </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">Request</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SetCtx</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx context</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Context</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">r </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">Request</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">GetCtxVar</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">key </span><span style="color:#89DDFF;">interface{},</span><span style="color:#A6ACCD;"> def </span><span style="color:#89DDFF;">...interface{})</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">gvar</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Var</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">r </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">Request</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SetCtxVar</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">key </span><span style="color:#89DDFF;">interface{},</span><span style="color:#A6ACCD;"> value </span><span style="color:#89DDFF;">interface{})</span></span>
<span class="line"></span></code></pre></div><ul><li><code>GetCtx</code>方法用于获取当前的 <code>context.Context</code>对象，作用同 <code>Context</code>方法。</li><li><code>SetCtx</code>方法用于设置自定义的 <code>context.Context</code>上下文对象。</li><li><code>GetCtxVar</code>方法用于获取上下文变量，并可给定当该变量不存在时的默认值。</li><li><code>SetCtxVar</code>方法用于设置上下文变量。</li></ul><p>示例:</p><p><code>SetCtx</code>方法常用于中间件中整合一些第三方的组件，例如第三方的链路跟踪组件等等。</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">context</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">github.com/gogf/gf/v2/frame/g</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">github.com/gogf/gf/v2/net/ghttp</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">	TraceIdName </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">trace-id</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	s </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> g</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Server</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">	s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Group</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">func(</span><span style="color:#A6ACCD;">group </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">ghttp</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">RouterGroup</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		group</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Middleware</span><span style="color:#89DDFF;">(func(</span><span style="color:#A6ACCD;">r </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">ghttp</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Request</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">			ctx </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WithValue</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">r</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Context</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> TraceIdName</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">HBm876TFCde435Tgf</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">			r</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">SetCtx</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">			r</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Middleware</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Next</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">})</span></span>
<span class="line"><span style="color:#A6ACCD;">		group</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ALL</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">func(</span><span style="color:#A6ACCD;">r </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">ghttp</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Request</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">			r</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Write</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">r</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Context</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">Value</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">TraceIdName</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#676E95;font-style:italic;">// 也可以使用</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#676E95;font-style:italic;">// r.Response.Write(r.GetCtxVar(TraceIdName))</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">})</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">})</span></span>
<span class="line"><span style="color:#A6ACCD;">	s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Run</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="文件上传" tabindex="-1">文件上传 <a class="header-anchor" href="#文件上传" aria-hidden="true">#</a></h2><p>在服务端通过 <code>Request</code>对象获取上传文件：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">github.com/gogf/gf/v2/frame/g</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">github.com/gogf/gf/v2/net/ghttp</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Upload uploads files to /tmp .</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Upload</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">r </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">ghttp</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Request</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	files </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> r</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetUploadFiles</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">upload-file</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    names</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> files</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Save</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/tmp/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		r</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WriteExit</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">err</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">	r</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WriteExit</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">upload successfully: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> names</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	s </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> g</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Server</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">	s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Group</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/upload</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">func(</span><span style="color:#A6ACCD;">group </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">ghttp</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">RouterGroup</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		group</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">POST</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Upload</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">})</span></span>
<span class="line"><span style="color:#A6ACCD;">	s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Run</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><a href="http://127.0.0.1:8000/upload" target="_blank" rel="noreferrer">http://127.0.0.1:8000/upload</a> 接口用于文件上传，该接口同时支持单个文件或者多个文件上传；</p><p><strong>关键代码说明</strong></p><ol><li>我们在服务端可以通过 <code>r.GetUploadFiles</code>方法获得上传的所有文件对象，也可以通过 <code>r.GetUploadFile</code>获取单个上传的文件对象。</li><li>在 <code>r.GetUploadFiles(&quot;upload-file&quot;)</code>中的参数 <code>&quot;upload-file&quot;</code>为本示例中客户端上传时的表单文件域名称，开发者可以根据前后端约定在客户端中定义，以方便服务端接收表单文件域参数。</li><li>通过 <code>files.Save</code>可以将上传的多个文件方便地保存到指定的目录下，并返回保存成功的文件名。如果是批量保存，只要任意一个文件保存失败，都将会立即返回错误。此外，<code>Save</code>方法的第二个参数支持随机自动命名上传文件。</li><li>通过 <code>group.POST(&quot;/&quot;, Upload)</code>注册的路由仅支持 <code>POST</code>方式访问。</li></ol>`,60),p=[l];function t(c,r,d,D,F,y){return n(),a("div",null,p)}const C=s(e,[["render",t]]);export{A as __pageData,C as default};
