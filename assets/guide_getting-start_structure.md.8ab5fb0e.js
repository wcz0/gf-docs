import{_ as t,c as e,o as r,d as i}from"./app.ce21e48a.js";const _=JSON.parse('{"title":"目录结构","description":"","frontmatter":{},"headers":[{"level":2,"title":"项目结构","slug":"项目结构","link":"#项目结构","children":[]},{"level":2,"title":"对外接口","slug":"对外接口","link":"#对外接口","children":[]},{"level":2,"title":"业务实现","slug":"业务实现","link":"#业务实现","children":[]},{"level":2,"title":"结构模型","slug":"结构模型","link":"#结构模型","children":[]}],"relativePath":"guide/getting-start/structure.md","lastUpdated":1675240931000}'),l={name:"guide/getting-start/structure.md"},n=i('<h1 id="目录结构" tabindex="-1">目录结构 <a class="header-anchor" href="#目录结构" aria-hidden="true">#</a></h1><p>工程目录设计是代码分层设计的进一步落地</p><h2 id="项目结构" tabindex="-1">项目结构 <a class="header-anchor" href="#项目结构" aria-hidden="true">#</a></h2><ul><li>api <strong>对外接口</strong> 对外提供服务的输入/输出数据结构定义。考虑到版本管理需要，往往以api/v1...存在。</li><li>hack <strong>工具脚本</strong> 存放项目开发工具、脚本等内容。例如，CLI工具的配置，各种shell/bat脚本等文件。</li><li>internal <strong>内部逻辑</strong> 业务逻辑存放目录。通过Golang internal特性对外部隐藏可见性。 <ul><li>cmd <strong>入口指令</strong> 命令行管理目录, 可以管理维护多个命令行</li><li>consts <strong>常量定义</strong> 项目所有常量定义</li><li>controller <strong>接口处理</strong> 接收/解析用户输入参数的入口/接口层</li><li>dao <strong>数据访问</strong> 数据访问对象, 这是一层抽象对象, 用于和底层数据库交互，仅包含最基础的 CURD 方法</li><li>logic <strong>业务封装</strong> 业务逻辑封装管理，特定的业务逻辑实现和封装。往往是项目中最复杂的部分</li><li>model <strong>结构模型</strong> 数据结构管理模块，管理数据实体对象，以及输入与输出数据结构定义。 <ul><li>do <strong>领域对象</strong> 用于dao数据操作中业务模型与实例模型转换，由工具维护，用户不能修改。</li><li>entity <strong>数据模型</strong> 数据模型是模型与数据集合的一对一关系，由工具维护，用户不能修改。</li></ul></li><li>service <strong>业务接口</strong> 用于业务模块解耦的接口定义层。具体的接口实现在logic中进行注入。</li></ul></li><li>manifest <strong>交付清单</strong> 包含程序编译、部署、运行、配置的文件 <ul><li>config <strong>配置管理</strong> 配置文件存在目录</li><li>docker <strong>镜像文件</strong> Docker镜像相关依赖文件，脚本文件等等。</li><li>deploy <strong>部署文件</strong> 部署相关的文件。默认提供了Kubernetes集群化部署的Yaml模板，通过kustomize管理</li></ul></li><li>resource <strong>静态资源</strong> 静态资源文件。这些文件往往可以通过 资源打包/镜像编译 的形式注入到发布文件中</li><li>main.go <strong>入口文件</strong></li></ul><h2 id="对外接口" tabindex="-1">对外接口 <a class="header-anchor" href="#对外接口" aria-hidden="true">#</a></h2><p>对外接口包含两部分：接口定义（api）+接口实现（controller）。</p><p>服务接口的职责类似于三层架构设计中的UI表示层，负责接收并响应客户端的输入与输出，包括对输入参数的过滤、转换、校验，对输出数据结构的维护，并调用 service 实现业务逻辑处理</p><h2 id="业务实现" tabindex="-1">业务实现 <a class="header-anchor" href="#业务实现" aria-hidden="true">#</a></h2><p>业务实现包含两部分：业务接口（service）+业务封装（logic）。</p><p>业务实现的职责类似于三层架构设计中的BLL业务逻辑层，负责具体业务逻辑的实现以及封装。</p><h2 id="结构模型" tabindex="-1">结构模型 <a class="header-anchor" href="#结构模型" aria-hidden="true">#</a></h2><p>model包的职责类似于三层架构中的Model模型定义层。模型定义代码层中仅包含全局公开的数据结构定义，往往不包含方法定义。</p><p>这里需要注意的是，这里的model不仅负责维护数据实体对象（entity）结构定义，也包括所有的输入/输出数据结构定义，被api/dao/service共同引用。这样做的好处除了可以统一管理公开的数据结构定义，也可以充分对同一业务领域的数据结构进行复用，减少代码冗余。</p>',13),s=[n];function o(a,d,g,c,h,u){return r(),e("div",null,s)}const m=t(l,[["render",o]]);export{_ as __pageData,m as default};
