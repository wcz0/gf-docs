import{_ as e,c as o,o as t,d}from"./app.ce21e48a.js";const b=JSON.parse('{"title":"数据库ORM","description":"","frontmatter":{},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[{"level":3,"title":"组件特性","slug":"组件特性","link":"#组件特性","children":[]}]}],"relativePath":"guide/basics/orm.md","lastUpdated":1675240931000}'),r={name:"guide/basics/orm.md"},a=d('<h1 id="数据库orm" tabindex="-1">数据库ORM <a class="header-anchor" href="#数据库orm" aria-hidden="true">#</a></h1><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-hidden="true">#</a></h2><p><code>GoFrame</code>框架的 <code>ORM</code>功能由 <code>gdb</code>模块实现，用于常用关系型数据库的 <code>ORM</code>操作</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>gdb</code>数据库引擎底层采用了 <strong>链接池设计</strong> ，当链接不再使用时会自动关闭，因此链接对象不用的时候不需要显式使用 <code>Close</code>方法关闭数据库连接。</p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>为提高数据库操作安全性，在 <code>ORM</code>操作中不建议直接将参数拼接成 <code>SQL</code>字符串执行，建议使用预处理的方式（充分使用 <code>?</code>占位符）来传递 <code>SQL</code>参数。<code>gdb</code>的底层实现中均采用的是预处理的方式处理开发者传递的参数，以充分保证数据库操作安全性。</p></div><p><strong>驱动引入</strong></p><p>为了将数据库驱动与框架主库解耦，从 <code>v2.1</code>版本开始，所有的数据库驱动都需要通过社区包手动引入。</p><p>数据库驱动的安装和引入请参考: <a href="https://github.com/gogf/gf/tree/master/contrib/drivers" target="_blank" rel="noreferrer">https://github.com/gogf/gf/tree/master/contrib/drivers</a></p><p><strong>接口文档</strong></p><p><a href="https://pkg.go.dev/github.com/gogf/gf/v2/database/gdb" target="_blank" rel="noreferrer">https://pkg.go.dev/github.com/gogf/gf/v2/database/gdb</a></p><h3 id="组件特性" tabindex="-1">组件特性 <a class="header-anchor" href="#组件特性" aria-hidden="true">#</a></h3>',11),c=[a];function s(i,n,g,l,p,h){return t(),o("div",null,c)}const m=e(r,[["render",s]]);export{b as __pageData,m as default};
